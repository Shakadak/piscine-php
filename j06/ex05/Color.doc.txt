The Color class handles RGB colors.

An instance can be contructed from either a RGB value:
new Color( array( 'rgb' => 12345 ) );

Or from distinct red, green, blue constitutives:
new Color( array( 'red' => 255, 'green' => 255, 'blue' => 255 ) );

Red, green, blue constitutives and RGB values are converted to intergers.
Negative or > to 255 color constitutives are left as is.
Any other use is undefined behaviour.

The class provides the following methods :

Color   add( Color $rhs );
Adds each color constitutive and returns a new Color instance.

Color   sub( Color $rhs );
Substracts each color constitutive and returns a new Color instance.

Color   mult( $f );
Multiplies each color constitutive by factor $f and returns a new Color
instance.

color identifier toPngColor(ressource $image)
Takes an image ressource and return the identifier corresponding to
the color stored in the instance of Color.

Color bifusion (Color $target, $progression)
Takes an ending color and return a color between
the current instance and the one passed to the method depending on the progression given.

Color trifudion (Color $A, $progressionA, Color $B, $progressionB, Color $C, $progressionC)
This is a static method.
It takes three color and their respective proportion.
The color returned depend on the proportion asked for.
